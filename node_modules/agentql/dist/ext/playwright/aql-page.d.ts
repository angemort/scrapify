import { Page, Response } from 'playwright';
import { ResponseMode } from '../../core/types';
import { LocatorExt } from './aql-locator';
import { AQLResponseProxy } from './aql-response-proxy';
type PageExt = Page & {
    goto(url: string, options?: {
        referer?: string;
        timeout?: number;
        waitUntil?: 'load' | 'domcontentloaded' | 'networkidle' | 'commit';
    }): Promise<null | Response>;
    getByPrompt(prompt: string, timeout?: number, waitForNetworkIdle?: boolean, includeHidden?: boolean, mode?: ResponseMode): Promise<LocatorExt | null>;
    queryElements(query: string, timeout?: number, waitForNetworkIdle?: boolean, includeHidden?: boolean, mode?: ResponseMode): Promise<AQLResponseProxy>;
    queryData(query: string, timeout?: number, waitForNetworkIdle?: boolean, includeHidden?: boolean, mode?: ResponseMode): Promise<Record<string, any>>;
    waitForPageReadyState(waitForNetworkIdle?: boolean): Promise<void>;
};
/**
 * Casts a Playwright `Page` object to an AgentQL `Page` type to get access to the AgentQL's querying API.
 *
 * @param {Page} page - The Playwright Page object to be wrapped.
 * @returns {PageExt} The wrapped Page object with AgentQL extensions.
 */
declare function wrap(page: Page): Promise<PageExt>;
export { PageExt, wrap };
//# sourceMappingURL=aql-page.d.ts.map