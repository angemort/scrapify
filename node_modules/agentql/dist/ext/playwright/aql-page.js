"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrap = wrap;
const api_constants_1 = require("../../core/api-constants");
const errors_1 = require("../../core/errors");
const logger_1 = require("../../core/logger");
const parser_1 = require("../../core/syntax/parser");
const aql_locator_1 = require("./aql-locator");
const aql_response_proxy_1 = require("./aql-response-proxy");
const driver_1 = require("./driver");
const driver_constants_1 = require("./driver-constants");
const page_monitor_1 = require("./page-monitor");
const utils_1 = require("./utils");
/**
 * Casts a Playwright `Page` object to an AgentQL `Page` type to get access to the AgentQL's querying API.
 *
 * @param {Page} page - The Playwright Page object to be wrapped.
 * @returns {PageExt} The wrapped Page object with AgentQL extensions.
 */
function wrap(page) {
    return __awaiter(this, void 0, void 0, function* () {
        const originalGoto = page.goto;
        let monitor = null;
        if (monitor === null) {
            monitor = new page_monitor_1.PageActivityMonitor(page);
            monitor.start();
        }
        yield monitor.monitorDomChange();
        return Object.assign(page, {
            /**
             * AgentQL's `page.goto()` override that uses `domcontentloaded` as the default value for the `waitUntil` parameter.
             * This change addresses issue with the `load` event not being reliably fired on some websites.
             *
             * For parameters information and original method's documentation, please refer to
             * [Playwright's documentation](https://playwright.dev/docs/api/class-page#page-goto)
             */
            goto(url, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    logger_1.logger.debug(`Navigating to URL: ${url} with options: ${JSON.stringify(options)}...`);
                    if (!options) {
                        options = {};
                    }
                    if (!options.waitUntil) {
                        options.waitUntil = 'domcontentloaded';
                    }
                    const result = yield originalGoto.call(page, url, options);
                    monitor.monitorDomChange();
                    logger_1.logger.debug(`Navigation to URL: ${url} completed.`);
                    return result;
                });
            },
            /**
             * Returns a single web element located by a natural language prompt (as opposed to an AgentQL query).
             *
             * @param {string} prompt - The natural language description of the element to locate.
             * @param {number} [timeout] - Timeout value in milliseconds for the connection with backend API service. Defaults to 60 seconds.
             * @param {boolean} [waitForNetworkIdle] - Whether to wait for network reaching full idle state before querying the page. If set to `false`, this method will only check whether the page has emitted the [`load` event](https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event). Defaults to `true`.
             * @param {boolean} [includeHidden] - Whether to include hidden elements on the page. Defaults to `false`.
             * @param {ResponseMode} [mode] - The mode of the query. It can be either `'standard'` or `'fast'`. Defaults to `fast`.
             * @returns {Promise<LocatorExt | null>} The found element or `null` if no matching elements were found.
             */
            getByPrompt(prompt_1) {
                return __awaiter(this, arguments, void 0, function* (prompt, timeout = driver_constants_1.DEFAULT_QUERY_ELEMENTS_TIMEOUT_SECONDS * 1000, waitForNetworkIdle = driver_constants_1.DEFAULT_WAIT_FOR_NETWORK_IDLE, includeHidden = driver_constants_1.DEFAULT_INCLUDE_HIDDEN_ELEMENTS, mode = api_constants_1.DEFAULT_RESPONSE_MODE) {
                    logger_1.logger.debug(`Getting element by prompt: ${prompt}...`);
                    yield this.waitForPageReadyState(waitForNetworkIdle);
                    const element = yield (0, driver_1.pwGetByPrompt)(page, prompt, timeout, includeHidden, mode);
                    if (!element) {
                        logger_1.logger.debug(`No element found for prompt: ${prompt}.`);
                        return null;
                    }
                    const locator = yield (0, driver_1.pwLocateInteractiveElement)(page, element);
                    if (!locator) {
                        logger_1.logger.debug(`No locator found for element with prompt: ${prompt}.`);
                        return null;
                    }
                    logger_1.logger.debug(`Element found for prompt: ${prompt}.`);
                    return (0, aql_locator_1.wrapLocator)(locator, element);
                });
            },
            /**
             * Queries the web page for multiple web elements that match the AgentQL query.
             *
             * @param {string} query - An AgentQL query in String format.
             * @param {number} [timeout] - Timeout value in milliseconds for the connection with backend API service. Defaults to 60 seconds.
             * @param {boolean} [waitForNetworkIdle] - Whether to wait for network reaching full idle state before querying the page. If set to `false`, this method will only check whether the page has emitted the [`load` event](https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event). Defaults to `true`.
             * @param {boolean} [includeHidden] - Whether to include hidden elements on the page. Defaults to `false`.
             * @param {ResponseMode} [mode] - The mode of the query. It can be either `'standard'` or `'fast'`. Defaults to `fast`.
             * @returns {Promise<AQLResponseProxy>} The AgentQL response object with elements that match the query. Response provides access to requested elements via its fields.
             */
            queryElements(query_1) {
                return __awaiter(this, arguments, void 0, function* (query, timeout = driver_constants_1.DEFAULT_QUERY_ELEMENTS_TIMEOUT_SECONDS * 1000, waitForNetworkIdle = driver_constants_1.DEFAULT_WAIT_FOR_NETWORK_IDLE, includeHidden = driver_constants_1.DEFAULT_INCLUDE_HIDDEN_ELEMENTS, mode = api_constants_1.DEFAULT_RESPONSE_MODE) {
                    logger_1.logger.debug(`Querying elements with query: ${(0, logger_1.minifyQuery)(query)}...`);
                    const queryNode = new parser_1.QueryParser(query).parse();
                    yield this.waitForPageReadyState(waitForNetworkIdle);
                    const response = yield (0, driver_1.pwQueryElements)(page, query, timeout, includeHidden, mode);
                    const locators = yield (0, aql_locator_1.generateResponseWithLocatorExt)(page, response, queryNode);
                    logger_1.logger.debug(`Query for elements completed: ${(0, logger_1.minifyQuery)(query)}.`);
                    return new aql_response_proxy_1.AQLResponseProxy(locators, queryNode);
                });
            },
            /**
             * Queries the web page for data that matches the AgentQL query, such as blocks of text or numbers.
             *
             * @param {string} query - An AgentQL query in String format.
             * @param {number} [timeout] - Timeout value in milliseconds for the connection with backend API service. Defaults to 900 seconds.
             * @param {boolean} [waitForNetworkIdle] - Whether to wait for network reaching full idle state before querying the page. If set to `false`, this method will only check whether the page has emitted the [`load` event](https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event). Defaults to `true`.
             * @param {boolean} [includeHidden] - Whether to include hidden elements on the page. Defaults to `true`.
             * @param {ResponseMode} [mode] - The mode of the query. It can be either `'standard'` or `'fast'`. Defaults to `fast`.
             * @returns {Promise<Record<string, any>>} Data that matches the query.
             */
            queryData(query_1) {
                return __awaiter(this, arguments, void 0, function* (query, timeout = driver_constants_1.DEFAULT_QUERY_DATA_TIMEOUT_SECONDS * 1000, waitForNetworkIdle = driver_constants_1.DEFAULT_WAIT_FOR_NETWORK_IDLE, includeHidden = driver_constants_1.DEFAULT_INCLUDE_HIDDEN_DATA, mode = api_constants_1.DEFAULT_RESPONSE_MODE) {
                    logger_1.logger.debug(`Querying data with query: ${(0, logger_1.minifyQuery)(query)}...`);
                    new parser_1.QueryParser(query).parse();
                    yield this.waitForPageReadyState(waitForNetworkIdle);
                    return yield (0, driver_1.pwQueryData)(page, query, timeout, includeHidden, mode);
                });
            },
            /**
             * Waits for the page to reach the "Page Ready" state, i.e., page has entered a relatively stable state and most main content is loaded.
             * Might be useful before triggering an AgentQL query or any other interaction for slowly rendering pages.
             *
             * @param {boolean} [waitForNetworkIdle] - Whether to wait for network reaching full idle state. If set to `false`, this method will only check whether the page has emitted the [`load` event](https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event). Defaults to `true`.
             */
            waitForPageReadyState() {
                return __awaiter(this, arguments, void 0, function* (waitForNetworkIdle = driver_constants_1.DEFAULT_WAIT_FOR_NETWORK_IDLE) {
                    logger_1.logger.debug(`Waiting for page to reach 'Page Ready' state...`);
                    if (!waitForNetworkIdle) {
                        // If we don't need to wait for network idle, we can return early and not start the monitor.
                        // We have overridden the page.goto method to wait for "domcontentloaded" already.
                        logger_1.logger.debug('Page ready: "load" event catched.');
                        return;
                    }
                    if (monitor === null) {
                        throw new errors_1.PageMonitorNotInitializedError();
                    }
                    yield (0, utils_1.determineLoadState)(page, monitor);
                    monitor.reset();
                });
            },
        });
    });
}
