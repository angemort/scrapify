"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerListNode = exports.ContainerNode = exports.IdListNode = exports.IdNode = exports.BaseNode = void 0;
const errors_1 = require("../errors");
const RESERVED_KEYWORDS = [
    'toData', // reserved for toData method of AQLResponseProxy
];
class BaseNode {
    constructor(name, description) {
        if (RESERVED_KEYWORDS.includes(name)) {
            throw new errors_1.BaseAgentQLError(`Name ${name} is reserved`);
        }
        this.name = name;
        this.description = description;
    }
    get queryName() {
        const description = this.queryDescription ? `(${this.queryDescription})` : '';
        const name = `${this.name}${description}`;
        return name;
    }
    get queryDescription() {
        const description = this.description || '';
        return description;
    }
    dump(indent = 2) {
        const indentSpaces = ' '.repeat(indent);
        return `${indentSpaces}${this.queryName}`;
    }
    getChildByName(name) {
        throw new errors_1.BaseAgentQLError(`Node ${this.name} has no child named ${name}`);
    }
}
exports.BaseNode = BaseNode;
/*
  {
    search_btn
  }
  */
class IdNode extends BaseNode {
}
exports.IdNode = IdNode;
/*
  {
    search_btns[]
  }
  */
class IdListNode extends IdNode {
    get queryName() {
        const description = this.queryDescription ? `(${this.queryDescription})` : '';
        return `${this.name}${description}[]`;
    }
}
exports.IdListNode = IdListNode;
/*
  {
    container {
      child1
      child2
    }
  }
  */
class ContainerNode extends BaseNode {
    constructor(name, description, children = []) {
        super(name, description);
        this.children = children;
    }
    dump(indent = 2) {
        const indentSpaces = ' '.repeat(indent);
        const nodeName = this.queryName ? `${this.queryName} ` : '';
        const header = `${indentSpaces}${nodeName}{\n`;
        const body = this.children.map((child) => child.dump(indent + 2)).join('\n');
        const footer = `\n${indentSpaces}}`;
        return `${header}${body}${footer}`;
    }
    getChildByName(name) {
        const child = this.children.find((child) => child.name === name);
        if (!child) {
            throw new errors_1.BaseAgentQLError(`Node ${this.name} has no child named ${name}`);
        }
        return child;
    }
}
exports.ContainerNode = ContainerNode;
/*
  {
    containers[] {
      child1
      child2
    }
  }
  */
class ContainerListNode extends ContainerNode {
    get queryName() {
        const description = this.queryDescription ? `(${this.queryDescription})` : '';
        return `${this.name}${description}[]`;
    }
}
exports.ContainerListNode = ContainerListNode;
